 #+title: Homelab Setup
 #+description: A few notes on how to setup my homelab
 #+author: Matthias Benaets

* General
- This is just a personal documentation on how to set up my homelab. This is highly targeted to myself (hence why it's hidden in this directory), but it should be usable by anyone.
- A copy of my "redacted" files will be added to /rsc
- Nay of the docker-compose.yaml files can be loaded inside portainer under stack. This is maybe more useful if you want full control in portainer.
- Notes:
  - Using Docker to run Traefik as a reverse proxy
  - Using Portainer to manage containers
  - Using Pi-hole on a seperate server to create custom dns entries in router or pi-hole (only if everything is internal)
    - When wanting to make everything local, remove the root (@) and wildcard (*) in dns resolver website (Cloudflare)
    - Expose only specific wildcard by adding them seperatly by name
  - Forwarded port 443, 80 ((secure) web) and 22 (ssh) (so this is external (custom entries as stated above are thus not set))
  - Registered Domain at epik.com
  - Manage DNS with Cloudflare
  - SSH is enable in my configuration.nix
  - Services hosted on device and not via docker+traefik get added to traefik/data/config.yml

* Docker
** Setup

- In configuration.nix

#+begin_src nix
virtualisation = {
  docker.enable = true;
};

users.groups.docker.members = [ "${user}" ];
#+end_src

** Portainer
*Gui for docker*

*** Standalone
- Without a reverse proxy, you can run it like below

#+begin_src
$ docker volume create portainer_data
$ docker run -d -p 8000:8000 -p 9443:9443 \
    --name portainer \
    --restart=always \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v portainer_data:/data \
    portainer/portainer-ce:latest
#+end_src

*https://localhost:9443*

*** Behind reverse proxy (Traefik)

- ~$ mkdir -p ~/Server/portainer/data~
- ~$ vim ~/Server/portainer/docker-compose.yml~

#+begin_src yaml
version: '3'

services:
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      -
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /home/<user>/Server/portainer/data:/data
    labels:
    # if you are not using traefik, comment out labels
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=http"
      - "traefik.http.routers.portainer.rule=Host(`portainer.<url>`)"
      - "traefik.http.middlewares.portainer-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.portainer.middlewares=portainer-https-redirect"
      - "traefik.http.routers.portainer-secure.entrypoints=https"
      - "traefik.http.routers.portainer-secure.rule=Host(`portainer.<url>`)"
      - "traefik.http.routers.portainer-secure.tls=true"
      - "traefik.http.routers.portainer-secure.service=portainer"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.docker.network=<traefik network name>"

networks:
  <traefik network name>:
    external: true
#+end_src

* Traefik
*Reverse Proxy*

- ~$ mkdir -p ~/Server/traefik/data~
- ~$ touch ~/Server/traefik/data/config.yml~
~ ~$ touch ~/Server/traefik/data/acme.json~
~ ~$ chmod 600 acme.json~
- ~$ docker network create <network name>~
- ~$ vim ~/Server/traefik/docker-compose.yml~

- To expose services to internet: port forward 80 and 443 to host
- If everything is local, create local dns entry in pi-hole

- Authentication is best done with a basic auth
  - ~$ nix-env -iA nixos.apacheHttpd~
  - ~$ echo $(htpasswd -nb "<user>" "<password>") | sed -e s/\\$/\\$\\$/g~

#+begin_src yaml
version: '3'

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - <network name>
    ports:
      - 80:80
      - 443:443
    environment:
      #For these settings, it recommended to have a resolver that does SSL.
      #For other providers, look on traefik website under HTTPS&TLS - Let's Encrypt
      - CF_API_EMAIL=<cloudflare email>
      - CF_API_KEY=<cloudflare general account api>
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /home/<user>/Server/traefik/data/traefik.yml:/traefik.yml:ro
      - /home/<user>/Server/traefik/data/acme.json:/acme.json
      - /home/<user>/Server/traefik/data/config.yml:/config.yml:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.<url>`)"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=<user>:<basic auth pass>"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.<url>`)"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=<resolver>"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main=<url>"
      - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.<url>"
      - "traefik.http.routers.traefik-secure.service=api@internal"

networks:
  <network name>:
    external: true
#+end_src

- ~$ vim ~/Server/traefic/data/traefik.yml~

#+begin_src yaml
api:                        # Enable dashboard
  dashboard: true
  debug: true
entryPoints:                # Ports
  http:
    address: ":80"
  https:
    address: ":443"
serversTransport:
  insecureSkipVerify: true
providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
  file:
    filename: /config.yml   # External services
certificatesResolvers:      # SSL
  cloudflare:               # <Resolver> can be anything
    acme:
      email: admin@matthisbenaets.xyz
      storage: acme.json
      dnsChallenge:
        provider: cloudflare
        resolvers:
          - "1.1.1.1:53"
          - "1.0.0.1:53"
#+end_src

- Since this container is started with docker compose, you wont be able to restart it with portainer.
- Navigate to the location of the docker-compose file:
  - ~docker-compose up -d --force-recreate~
  - ~docker-compose down~

*localhost:8080*

** Domain
*this is how I do it*
- Get a domain (I use epik.com)
  - Manage domains
  - Select url & Set name servers
  - Change to Cloudflare
- Go to Cloudflare
  - Add a website
  - Give your domainname
  - Enter name servers that are now given
  - Wait until migration is complete
  - Extra:
    - Follow Quick Start Guide and enable HTTPS rewrites and always use HTTPS
  - It seems that Cloudflare not not correctly import exisitng A records. Mainly the root url.
    - Add: Type A - @ - <host ip>

* Nginx
*Web Server*

- In portainer
  - Add container
  - name: nginx
  - image: nginx:latest
  - no ports (traefik will do this)
  - Advanced container settings
    - ~$ mkdir ~/Server/<nginx-html website>~
    - ~$ touch index.html ...~
    - Volumes: Bind Container=/usr/share/nginx/html Host=<path to nginx-html dir>
    - Network: bridge to <traefik network name>
    - Labels:
      - traefik.enable = true
      - traefik.http.routers.nginx.entrypoint = http
      - traefik.http.routers.nginx.rule = Host(`<optional wildcard>.<url>`)
      - traefik.http.services.nginx.loadbalancer.server.port = 80
      - traefik.http.routers.nginx-secure.tls = true
      - traefik.http.middlewares.nginx-https-redirect.redirectscheme.scheme = nginx-https-redirect
      - traefik.http.routers.nginx-secure.entrypoints = https
      - traefik.http.routers.nginx-secure.rule = Host(`<optional wildcar>.<url>`)
      - traefik.http.routers.nginx-secure.service = nginx
      - traefik.http.routers.nginx-secure.tls = true

- This can ofcourse also be interpreted inside portainer, no need to use the docker-compose file.
  - This meanings it's easier to manage the container in portainer
  - It take a bit longer to set up.
  - I guess you might be able to create a stack, but I have not tried it

*localhost:80/:443 or <url>*

* Local services with DNS
*Useful to have a weblink instead of having to enter the ip-address of the host*

- Do not forget to add the host url to your local DNS records. This can be done in either:
  - Your (modem-)router
  - Local nameserver i.e. pi-hole

- Example docker-compose.yaml (without SSL|can be loaded in portainer under stack):
#+begin_src yaml
services:
  hello:
    image: nginxdemos/hello
    container_name: hello
    hostname: hello
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hello.rule=Host(`hello.home.lan`)"
      - "traefik.http.services.hello.loadbalancer.server.port=80"
      - "traefik.docker.network=proxy"

networks:
  proxy:
    external: true
#+end_src

* Plex
*Media Server*

- At the moment I host this seperately from docker
- Add config to ~~/Server/Traefik/config.yml~

#+begin_src yaml
http:
routers:
    plex:
    entryPoints:
        - "https"
    rule: "Host(`plex.<url>`)"
    tls:
        certResolver: <resolver i.e. cloudflare>
    service: plex
services:
    plex:
    loadBalancer:
        servers:
        - url: "http://<host ip>:32400"
        passHostHeader: true
#+end_src

*localhost:32400 or plex.<url>*

* Pi-Hole
*DNS Server/Ad blocker*
*No longer useful for me since I run this on a seperate local server*

- In portainer
  - Add container
  - name: pi-hole
  - image: pihole/pihole:latest

** Standalone
- manual network port publishing:
  - 53:53 TCP
  - 53:53 UDP
  - 67:67 UDP
  - 80:80 TCP
  - 443:443 TCP
- Advanced container settings
  - volumes:
    - ~$ mkdir -p /home/<user>/docker/etc/pihole /home/<user>/docker/etc/dnsmasq.d~
    - Container = /etc/pihole Host = /home/<user>/docker/etc/pihole
    - Container = /etc/dnsmasq.d Host = /home/<user>/docker/etc/dnsmasq.d
  - env:
    - TZ = Europe/Brussels
    - WEBPASSWORD = <password>
  - restart policy = unless stopped

*localhost/admin*

** Behind reverse proxy (traefik)
*not recommended if you want to not set this up publicly with ports forwarded since you would want to setup dns rules to point url to your machine*
*might need more labels (see portainer and nginx)*

*** On this computer
- manual network port publishing:
  - 53:53 TCP
  - 53:53 UDP
- Advanced container setting:
  - volumes:
    - ~$ mkdir -p /home/<user>/docker/etc/pihole /home/<user>/docker/etc/dnsmasq.d~
    - Container = /etc/pihole Host = /home/<user>/docker/etc/pihole
    - Container = /etc/dnsmasq.d Host = /home/<user>/docker/etc/dnsmasq.d
  - network: <traefik network name)>
  - env:
    - TZ = Europe/Brussels
    - WEBPASSWORD = <password>
    - #VIRTUAL_HOST = Host(`pi.<url>`)
  - labels:
    - traefik.enable = true
    - traefik.http.routers.pihole.entrypoint = http
    - traefik.http.routers.pihole.rule = Host('pi.<url>')
    - traefik.http.routers.pihole.tls = true
    - traefik.http.routers.pihole.tls.certresolver = <resolver i.e. cloudflare>
    - traefik.http.routers.pihole.loadbalancer.server = 80
  - restart policy = unless stopped

*pi.<url>/admin*

*** Hosted by server

- Spin up a normal pihole container like above (standalone)
- Edit traefik config.yml
- These router and service can be merged with an already existing config (for example how plex is set up)

#+begin_rsc yaml
http:
  routers:
    pi:
      entryPoints:
        - "https"
      rule: "Host(`pi.<domain>`)"
      tls:
        certResolver: <resolver>
      service: pi
  services:
    pi:
      loadBalancer:
        servers:
          - url: "http://<host ip>"
        passHostHeader: true
#+end_rsc


*pi.<url>/admin*

* Nginx-rtmp
*RTMP Server for livestreaming*

- ~$ docker run -d -p 1935:1935 --name rtmp --restart=always tiangolo/nginx-rtmp~

* Zoffline
*Offline Zwift*
*This is hosted on my ubuntu server vm on macbook*

- install ubuntu server (with option docker if prompted) in vm but network bridged
- ~$ sudo apt install ubuntu-desktop~ (only needed for token)
- ~$ docker create --name zwift-offline -p 443:443 -p 80:80 -p 3022:3022/udp -p 3023:3023 -v </path/to/host/storage>:/usr/src/app/zwift-offline/storage -e TZ=Europe/Brussels zoffline/zoffline~
- ~$ docker update --restart unless-stopped zwift-offline~ (if you want it to always run)
- add ip of client to server-ip.txt in /path/to/host/storage
- add ~<vmip> us-or-rly101.zwift.com secure.zwift.com cdn.zwift.com launcher.zwift.com~ to /etc/hosts
- ~$git clone https://github.com/zoffline/zwift-offline~
- ~$ sudo apt install python3-pip~
- ~$ sudo ln -s /usr/bin/python3 /usr/bin/python~
- Do steps in repo for Mac OS X
- Obtain zwift profile, use real login and password when prompted. Move profile.bin to storage
- Obtain strava token (move to storage location but if userid dir exists, move it in there after first load)
- ~$ docker start zwift-offline~

* Duck DNS
*DNS Service*
*No longer useful for me since I have a domain*

- www.duckdns.org
- for me, login with github
- Create subdomain
- In portainer
- Add container
- name: duckdns
- image: linuxserver/duckdns
- Advanced container settings
    - Env:
    - ~$ id~
    - PUID = 1000 (what you get when running the command)
    - PGID = 1000
    - TZ = Europe/Brussels
    - TOKEN = Copy from duckdns website
    - LOG_FILE = true
    - SUBDOMAINS = websitename, otherwebsitename (without https:// and .duckdns.org)
    - Volumes:
    - ~$ mkdir -p /home/<user>/.../duckdns/config~
    - container = /config Host= /path/to/duckdns/config
    - Restart Policy:
    - Unless stopped
- Now checkdns
